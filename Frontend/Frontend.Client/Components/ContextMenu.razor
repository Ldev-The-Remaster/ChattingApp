@namespace Frontend.Client.Components
@using System
@using System.Net
@using Models
@using LSMP

@if (ContextMenuService.IsBeingShown)
{
    <div class="contextMenuDiv" @onclick:stopPropagation="true">
        <ul>
            <li @onclick="MessageUser">Message</li>
            @if (ClientManager.IsAdmin)
            {
                @if (ContextMenuService.MutedUsers.Contains(ContextMenuService.TargetUser))
                {
                    <li @onclick="UnmuteUser">Unmute</li>
                }
                else
                {
                    <li @onclick="MuteUser">Mute</li>
                }

                <li @onclick="KickUser">Kick</li>
                <li @onclick="BanUser">Ban</li>
                <li @onclick="IpBanUser">IP Ban</li>
            }
        </ul>
    </div>
}


@code {
    public static int BoxWidth = 200;

    protected override void OnInitialized()
    {
        ContextMenuService.OnChange += StateHasChanged;
    }

    public void MessageUser()
    {
        ChannelManager.SetCurrentChannel(ChannelManager.CreateDmChannel(ContextMenuService.TargetUser));
        hideOnAction();
        return;
    }

    public void MuteUser()
    {
        ContextMenuModalService.Type = "mute";
        ContextMenuModalService.showModal();
        hideOnAction();
        return;
    }

    public async void UnmuteUser()
    {
        await WebSocketService.SendMessageAsync(Messaging.UnmuteMessage(ContextMenuService.TargetUser, ""));
        ContextMenuService.MutedUsers.Remove(ContextMenuService.TargetUser);
        hideOnAction();
        return;
    }

    public void KickUser()
    {
        ContextMenuModalService.Type = "kick";
        ContextMenuModalService.showModal();
        hideOnAction();
        return;
    }

    public void BanUser()
    {
        ContextMenuModalService.Type = "ban";
        ContextMenuModalService.showModal();
        hideOnAction();
        return;
    }

    public void IpBanUser()
    {
        ContextMenuModalService.Type = "ipBan";
        ContextMenuModalService.showModal();
        hideOnAction();
        return;
    }

    public void hideOnAction()
    {
        if (ContextMenuService.IsBeingShown)
        {
            ContextMenuService.HideContextMenu();
        }
    }
}

<style>
    .contextMenuDiv {
        top: @(ContextMenuService.Top)px;
        left: @(ContextMenuService.Left)px;
        position: absolute;
        z-index: 1000;
        background-color: #D9D9D9;
        color: #111111;
        border: solid 1px;
        border-radius: 6px;
        font-weight: bold;
        width: @(BoxWidth)px;
    }

    .contextMenuDiv ul {
        list-style: none;
        margin-left: auto;
        margin-right: auto;
        padding: 0;
    }

    .contextMenuDiv li {
        margin: 0.5rem;
        font-size: 1.1rem;
        padding: 1rem;
        text-align: center;
        border-radius: 6px;
    }

    .contextMenuDiv li:hover {
        cursor: pointer;
        background-color: #ffffff4f
    }
</style>

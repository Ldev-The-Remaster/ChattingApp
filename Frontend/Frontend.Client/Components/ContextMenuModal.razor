﻿@using Models
@using LSMP

@if (ContextMenuModalService.modalShown)
{
    <div class="modal-overlay" @onclick="ContextMenuModalService.hideModal">
        <div class="infraction-modal" @onclick:stopPropagation="true">
            <div style="font-weight:bolder">@ContextMenuModalService.Type.ToUpper() REASON</div>
            <div class="reason-input-box">
                <textarea placeholder="Reason..." value="@Reason" @oninput="e => Reason = e.Value.ToString()" />
            </div>
            <button class="sendReasonButton" @onclick="SendReason">@ContextMenuModalService.Type.ToUpper() @ContextMenuService.TargetUser</button>
        </div>
    </div>
}

@code {
    public string Reason = string.Empty;

    protected override void OnInitialized()
    {
        ContextMenuModalService.OnModalChange += StateHasChanged;
    }

    public async void SendReason()
    {
        if (ContextMenuModalService.Type == "mute")
        {
            await WebSocketService.SendMessageAsync(Messaging.MuteMessage(ContextMenuService.TargetUser, Reason));
            ContextMenuService.MutedUsers.Add(ContextMenuService.TargetUser);
            ContextMenuModalService.hideModal();
        }

        if (ContextMenuModalService.Type == "kick")
        {
            await WebSocketService.SendMessageAsync(Messaging.KickMessage(ContextMenuService.TargetUser, Reason));
            ContextMenuModalService.hideModal();
        }

        if (ContextMenuModalService.Type == "ban")
        {
            await WebSocketService.SendMessageAsync(Messaging.BanMessage(ContextMenuService.TargetUser, Reason));
            ContextMenuModalService.hideModal();
        }

        if (ContextMenuModalService.Type == "ipBan")
        {
            await WebSocketService.SendMessageAsync(Messaging.BanIpMessage(ContextMenuService.TargetUser, Reason));
            ContextMenuModalService.hideModal();
        }

        Reason = "";
    }
}

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); 
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 999; 
    }

    .infraction-modal {
        width: 25rem;
        padding: 10px;
        border: 1px solid;
        border-radius: 7px;
        display: flex;
        flex-direction: column;
        position: fixed;
        top: 50%;
        left: 50%;
        background-color: #D9D9D9;
        transform: translate(-50%, -50%);
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .reason-input-box {
        padding: 10px;
        background-color: #D9D9D9;
        width: 80%;
        display: flex;
        justify-content: center;
    }

    .sendReasonButton {
        height: 3.5rem;
        font-size: 0.9rem;
        font-weight: bolder;
        color: #D9D9D9;
        border: 1px;
        border-radius: 6px;
        background-color: #525CEB;
        margin-left: 0.5rem;
        width: 9rem;
    }

    .reason-input-box textarea {
        text-align: justify;
        resize: none;
        color: white;
        background-color: #3c3a3e;
        width: 80%;
        height: 5rem;
        font-size: 1rem;
        border-radius: 6px;
        border: none;
        padding: 0 10px;
        font-family: "Inter","sans-seriff";
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .chat-input-box textarea:hover,
    .chat-input-box textarea:focus {
        outline: none;
    }

</style>

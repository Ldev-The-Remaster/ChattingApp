@page "/channel/{channelName}"
@using Frontend.Client.Pages
@using Models
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>@ChannelManager.CurrentChannel</PageTitle>

<div class="main-page" @onclick="HandleGlobalClick">
    <div class="user-block">
        <ul class="user-list">
            <h1>DIRECT MESSAGES</h1>
            @foreach (KeyValuePair<string,string> channelHashPair in ClientManager.dmChannels)
            {
                <li onclick="@(() => NavigateToChannel(channelHashPair.Value))">@channelHashPair.Key</li>
            }
        </ul>
    </div>
    <div class="main-block">
        <div class="main-top">
            @if (ChannelManager.CurrentChannel != "general-chat")
            {
                <button onclick=@(() => NavigateToChannel("general-chat"))>BACK TO MAIN</button>
            }
            <h1>Chat Room</h1>
            @if (ClientManager.IsAdmin)
			{
				<button @onclick="HandleSettings">SETTINGS</button>
			}
        </div>
        <div class="main-content">
            <div class="message-container" id="messageContainer">
                @foreach (var message in messageHistory)
                {
                    if (message.Sender == null)
                    {
                        <ServerAlertMessageComponent MessageContent="@message.Content" Timestamp="@DateTimeOffset.FromUnixTimeSeconds(message.TimeStamp).DateTime" />
                    }
                    else
                    {
                        string messageConfirm = message.IsConfirmed ? "confirmed-message" : "unconfirmed-message";
                        <div class="@messageConfirm">
                            <MessageComponent User="@message.Sender" MessageContent="@message.Content" Timestamp="@DateTimeOffset.FromUnixTimeSeconds(message.TimeStamp).DateTime" isConfirmed="@message.IsConfirmed" />
                        </div>
                    }
                }
            </div>
        </div>
        <div class="chat-input-box">
            <textarea placeholder="Type your message here" value="@currentMessage" @oninput="e => currentMessage = e.Value.ToString()" @onkeydown="HandleEnterKey" />
            <button class="sendMessageButton" @onclick="SendMessage">➤</button>
        </div>
    </div>
    <div class="user-block">
        <h1>CONNECTED USERS</h1>
        <ul class="user-list">
            @foreach (var user in userList)
            {
                <li @oncontextmenu="e => ContextMenuService.ShowContextMenu(e, JSRuntime, user)" @oncontextmenu:preventDefault="true">@user</li>
            }
        </ul>
    </div>
</div>



@code {
    [Parameter]
    public string channelName { get; set; }
    private string currentMessage = string.Empty;
    public List<string> userList = new List<string>();
    public List<UserMessage> messageHistory = new List<UserMessage>();

    protected override void OnInitialized()
    {
        ChannelManager.UpdateChannelMessageHistory("general-chat", ChannelManager.GetMessageHistory("general-chat"));
        RefreshChannelData();
        ChannelManager.OnStateChange += RefreshChannelData;
        WebSocketService.OnMessageReceived += MessageReceived;
    }

    public void RefreshChannelData()
    {
        userList = ChannelManager.GetCurrentChannelData().UserList;
        messageHistory = ChannelManager.GetCurrentChannelData().MessageHistory;
        Navigation.NavigateTo("/channel/" + ChannelManager.CurrentChannel);
        StateHasChanged();
    }

    public void NavigateToChannel(string channel)
    {
        ChannelManager.UpdateChannelMessageHistory(channel, ChannelManager.GetMessageHistory(channel));
        ChannelManager.SetCurrentChannel(channel);
    }

    public void MessageReceived(UserMessage message)
    {
        if(message.Channel != ChannelManager.CurrentChannel)
        {
            return;
        }

        UserMessage? currentUserMessage = messageHistory.Find(messageInList => message.Hash == messageInList.Hash);
        if (currentUserMessage != null)
        {
            currentUserMessage.IsConfirmed = true;
        }
        else
        {
            messageHistory.Add(message);
        }

        InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage))
        {
            return;
        }

        var newMessage = new UserMessage(ClientManager.CurrentUser, ChannelManager.CurrentChannel, currentMessage, false);
        await ChannelManager.SendMessage(newMessage);
        currentMessage = String.Empty;
    }

    private async void HandleEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private void HandleGlobalClick()
    {
        if (ContextMenuService.IsBeingShown)
        {
            ContextMenuService.HideContextMenu();
        }

        if (ContextMenuModalService.modalShown)
        {
            ContextMenuModalService.hideModal();
        }
    }

    private void HandleSettings()
    {
		Navigation.NavigateTo("/settings");
    }
}

<style>
    .confirmed-message {
        opacity: 1;
    }

    .unconfirmed-message {
        opacity: 0.5;
    }
</style>



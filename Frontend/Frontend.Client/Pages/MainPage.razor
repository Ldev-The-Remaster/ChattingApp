@page "/main-page"
@using Frontend.Client.Components
@using Models
@using static Frontend.Client.Models.WebSocketService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Main Page</PageTitle>

<div class="main-page" @onclick="HandleGlobalClick">
    <div class="main-block">
        <div class="main-top">
            <h1>Chat Room</h1>
            <button>SETTINGS</button>
        </div>
        <div class="main-content">
            <div class="message-container" id="messageContainer">
                @foreach (var message in messages)
                {
                    if (message.Sender == null)
                    {
                        <ServerAlertMessageComponent MessageContent="@message.Content" Timestamp="@DateTimeOffset.FromUnixTimeSeconds(message.TimeStamp).DateTime" />
                    }
                    else
                    {
                        string messageConfirm = message.IsConfirmed ? "confirmed-message" : "unconfirmed-message";
                        <div class="@messageConfirm">
                            <MessageComponent User="@message.Sender" MessageContent="@message.Content" Timestamp="@DateTimeOffset.FromUnixTimeSeconds(message.TimeStamp).DateTime" isConfirmed="@message.IsConfirmed" />
                        </div>
                    }
                }
            </div>
        </div>
        <div class="chat-input-box">
            <textarea placeholder="Type your message here" value="@currentMessage" @oninput="e => currentMessage = e.Value.ToString()" @onkeydown="HandleEnterKey" />
            <button class="sendMessageButton" @onclick="SendMessage">➤</button>
        </div>
    </div>
    <div class="user-block">
        <h1>CONNECTED USERS</h1>
        <ul class="user-list">
            @foreach (var user in users)
            {
                <li @oncontextmenu="e => ContextMenuService.ShowContextMenu(e, JSRuntime, user)" @oncontextmenu:preventDefault="true">@user</li>
            }
        </ul>
    </div>
</div>

@code {
    private string currentMessage = string.Empty;
    private List<string> users = new List<string>();
    private List<UserMessage> messages = new List<UserMessage>();
    protected override void OnInitialized()
    {
        HandleDisconnect();
       // users = ClientManager.CurrentUsersList;
        WebSocketService.OnClosed += HandleDisconnect;
        WebSocketService.OnMessageReceived += MessageReceived;
      //  ClientManager.OnUserListUpdate += UpdateUserList;
    }

    private void HandleDisconnect()
    {
        if (!WebSocketService.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
    }

   

    public void MessageReceived(UserMessage message)
    {
        UserMessage? currentUserMessage = messages.Find(messageInList => message.Hash == messageInList.Hash);
        if(currentUserMessage != null)
        {
            currentUserMessage.IsConfirmed = true;
        }
        else
        {
            messages.Add(message);
        }
        InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage))
        {
            return;
        }

        var newMessage = new UserMessage(ClientManager.CurrentUser, currentMessage, false);
        messages.Add(newMessage);
        await WebSocketService.SendMessage(newMessage);
        currentMessage = String.Empty;
    }

    private async void HandleEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }
    private void HandleGlobalClick()
    {
        if (ContextMenuService.IsBeingShown)
        {
            ContextMenuService.HideContextMenu();
        }

        if (ContextMenuModalService.modalShown)
        {
            ContextMenuModalService.hideModal();
        }
    }
}

<style>
    .confirmed-message {
        opacity: 1;
    }

    .unconfirmed-message {
        opacity: 0.5;
    }
</style>

@page "/main-page"
@using Frontend.Client.Components
@using Models
@using static Frontend.Client.Models.WebSocketService
@inject NavigationManager NavigationManager
@inject WebSocketService WebSocketService
@inject IJSRuntime JSRuntime

<PageTitle>Main Page</PageTitle>

<div class="main-page">
    <div class="main-block">
        <div class="main-top">
            <h1>Chat Room</h1>
            <button>SETTINGS</button>
        </div>
        <div class="main-content">
            <div class="message-container" id="messageContainer">
                @foreach (var message in messages)
                {
                    if (message.User == null)
                    {
                        <ServerAlertMessageComponent MessageContent="@message.Content" Timestamp="@message.Timestamp" />
                    }
                    else
                    {
                        <MessageComponent User="@message.User" MessageContent="@message.Content" Timestamp="@message.Timestamp" />
                    }
                }
            </div>
        </div>
        <div class="chat-input-box">
            <input type="text" placeholder="Type your message here" value="@newMessage" @oninput="e => newMessage = e.Value.ToString()" @onkeydown="HandleEnterKey" />
            <button class="sendMessageButton" @onclick="SendMessage">➤</button>
        </div>
    </div>
    <div class="user-block">
        <h1>CONNECTED USERS</h1>
        <ul class="user-list">
            @foreach (var user in users)
            {
                <li @oncontextmenu="e => ContextMenuService.ShowContextMenu(e, JSRuntime)" @oncontextmenu:preventDefault="true">@user</li>
            }
        </ul>
    </div>
</div>

@code {
    private string newMessage = string.Empty;
    private List<string> users = new List<string>();
    private List<Message> messages = new List<Message>();
    protected override void OnInitialized()
    {
        HandleDisconnect();
        users = ClientManager.CurrentUsersList;
        WebSocketService.OnClosed += HandleDisconnect;
        WebSocketService.OnMessageReceived += MessageReceived;
        ClientManager.OnUserListUpdate += UpdateUserList;
    }

    private void HandleDisconnect()
    {
        if (!WebSocketService.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private void UpdateUserList()
    {
        users = ClientManager.CurrentUsersList;
        InvokeAsync(StateHasChanged);
        Console.WriteLine("users in mainpage: " + string.Join(", ", users));
    }

    public void MessageReceived(Message message)
    {
        messages.Add(message);
        InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(newMessage))
        {
            await WebSocketService.SendMessageAsync("DO SEND\r\nWITH\r\n" + newMessage);
            newMessage = string.Empty;
        }
    }

    private async void HandleEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }
}



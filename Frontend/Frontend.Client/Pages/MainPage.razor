@page "/main-page"
@using Frontend.Client.Components
@using Models
@inject WebSocketService WebSocketService

<PageTitle>Main Page</PageTitle>

<div class="main-page">
    <div class="main-block">
        <div class="main-top">
            <h1>Chat Room</h1>
            <button>SETTINGS</button>
        </div>
        <div class="main-content">
            <div class="message-container" id="messageContainer">
                @foreach (var message in Messages)
                {
                    <MessageUi User="@message.User" MessageContent="@message.Content" Timestamp="@message.Timestamp" />
                }
            </div>
        </div>
        <div class="chat-input-box">
            <input type="text" placeholder="Type your message here" value="@newMessage" @oninput="e => newMessage = e.Value.ToString()" @onkeydown="HandleEnterKey" />
            <button class="sendMessageButton" @onclick="SendMessage">➤</button>
        </div>
    </div>
    <div class="user-block">
        <h1>CONNECTED USERS</h1>
        <ul class="user-list">
            <li>user1</li>
            <li>user2</li>
            <li>user3</li>
            <li>user4</li>
        </ul>
    </div>
</div>

@code {
    private List<Message> Messages = new List<Message>();
    private string newMessage = string.Empty;

    protected override void OnInitialized()
    {
        WebSocketService.OnMessageReceived += MessageReceived;
    }

    private void MessageReceived(string rawMessage)
    {
        Console.WriteLine("Message received in MainPage: " + rawMessage);

        try
        {
            var lines = rawMessage.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None);

            if (lines.Length >= 6 &&
                lines[0].StartsWith("DO SEND") &&
                lines[1].StartsWith("FROM ") &&
                lines[2].StartsWith("IN general-chat") &&
                lines[3].StartsWith("AT ") &&
                lines[4].StartsWith("WITH"))
            {
                var user = lines[1].Substring(5); // "FROM user"
                var timestamp = DateTimeOffset.FromUnixTimeSeconds(long.Parse(lines[3].Substring(3))).DateTime; // "AT timestamp"
                var content = string.Join("\n", lines.Skip(5)); // Content strarts after "WITH" line

                Messages.Add(new Message
                    {
                        User = user,
                        Content = content,
                        Timestamp = timestamp
                    });

                InvokeAsync(StateHasChanged);
            }
            else
            {
                Console.WriteLine("Error: Message format is invalid.");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error processing message: {e.Message}");
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(newMessage))
        {
            await WebSocketService.SendMessageAsync("DO SEND\r\nWITH\r\n" + newMessage);
            newMessage = string.Empty;
        }
    }

    private async void HandleEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    public class Message
    {
        public string? User { get; set; }
        public string? Content { get; set; }
        public DateTime Timestamp { get; set; }
    }
}
@page "/"
@page "/login"
@using Models
@using System.Net.WebSockets
@using System.Net
@attribute [StreamRendering(true)]
@inject NavigationManager NavigationManager


<PageTitle>login</PageTitle>
<div class="login-div">
    <h1>WELCOME TO LDEV:THE REMASTER</h1>
    <h1>JOIN CHAT ROOM</h1>
    @* for the IP address field there needs to be validation where either the user gets an error upon entering
    something that does not represent an ip *@
    <div class="login-items-div">
        <div class="input-group">
            <label for="username">USERNAME</label>
            <InputText class="login-input" id="username" @bind-Value="userInfo.username" />
        </div>
        <div class="input-group">
            <label for="ip">IP ADDRESS</label>
            <InputText class="login-input" id="ip" @bind-Value="userInfo.ip" />
        </div>
        <div class="input-group">
            <label for="port">PORT</label>
            <InputNumber class="login-input no-arrows" id="port" @bind-Value="userInfo.port" />
        </div>
        <button class="login-button" @onclick=" HandleLogin">JOIN</button>
        <div class="loginError">
            @if (validIp == false)
            {
                <p>Error: <span>The IP address is invalid!</span></p>
            }
            @if (validUser == false)
            {
                <p>Error: <span>User is invalid!</span></p>
            }
            @if (validPort == false)
            {
                <p>Error: <span>The port is invalid!</span></p>
            }
        </div>

    </div>
</div>


@code
{
    private ClientWebSocket? _webSocket;
    string? errorMesage;
    public LoginInfo userInfo { get; set; } = new LoginInfo();
    // the purpose of these booleans is to be used in an if statement in the HTML to render the error codes accordingly
    bool validUser = true;
    bool validIp = true;
    bool validPort = true;

    public async Task HandleLogin()
    {
        Console.WriteLine("Handling Login");
        // code to handle the user login info and send it to the server
        if (userInfo.username.Length > 0)
        {
            // send a message to the server and request a list of the connected users
            // string[] connectedUsers = GetConnectedUsers();
            // if the sever doesn't respond return
            // compare the current username to the list of connected users
            // foreach (string user in connectedUsers)
            // {
            // if the username exists return a message that username is taken
            // if (userInfo.username == user)
            // {
            //   Console.WriteLine("User name is already taken");
            // }
            // }
            Console.WriteLine("User is valid");
            validUser = true;
        }
        else
        {
            Console.WriteLine("Invalid Username");
            validUser = false;
        }

        if (userInfo.ip.Length > 0)
        {
            if (!IPAddress.TryParse(userInfo.ip, out _))
            {
                Console.WriteLine("Invalid IP");
                validIp = false;
            }
            if (userInfo.ip == "localhost")
            {
                validIp = true;
            }
        }
        else
        {
            Console.WriteLine("Invalid IP");
            validIp = false;
        }

        if (!userInfo.port.HasValue && !(userInfo.port >= 0 && userInfo.port <= 65535))
        {
            Console.WriteLine("port number is invalid");
            validPort = false;
        }

        try
        {
            if (userInfo.username.Length > 0)
            {
                await ConnectWebSocket("ws://" + userInfo.ip + ":" + userInfo.port);
                NavigationManager.NavigateTo("main-page");
            }
            else
            {
                throw new Exception("User name is empty");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine("WebSocket connection error: " + ex.Message);
        }
    }

    private async Task ConnectWebSocket(string url)
    {
        _webSocket = new ClientWebSocket();
        await _webSocket.ConnectAsync(new Uri(url), CancellationToken.None);
        await SendMessage(userInfo.username + " is Connected!");
        Console.WriteLine("CONNECTED");
    }

    private async Task SendMessage(string message)
    {
        if (_webSocket != null && _webSocket.State == WebSocketState.Open)
        {
            byte[] buffer = System.Text.Encoding.UTF8.GetBytes(message);
            ArraySegment<byte> segment = new ArraySegment<byte>(buffer);

            await _webSocket.SendAsync(segment, WebSocketMessageType.Text, true, CancellationToken.None);
        }
        else
        {
            Console.WriteLine("WebSocket is not connected!");
        }
    }
}
@page "/"
@page "/login"
@using Models
@using System.Net
@using System.Net.WebSockets
@inject NavigationManager NavigationManager


<PageTitle>login</PageTitle>
<div class="login-div">
    <h1>WELCOME TO LDEV:THE REMASTER</h1>
    <h1>JOIN CHAT ROOM</h1>
    @* for the IP address field there needs to be validation where either the user gets an error upon entering
    something that does not represent an ip *@
    <div class="login-items-div">
        <div class="input-group">
            <label for="username">USERNAME</label>
            <InputText class="login-input" id="username" @bind-Value="userInfo.username" />
        </div>
        <div class="input-group">
            <label for="ip">IP ADDRESS</label>
            <InputText class="login-input" id="ip" @bind-Value="userInfo.ip" />
        </div>
        <div class="input-group">
            <label for="port">PORT</label>
            <InputNumber class="login-input no-arrows" id="port" @bind-Value="userInfo.port" />
        </div>
        <button class="login-button" @onclick="HandleLogin">
            @if (!isLoading)
            {
                <span>JOIN</span>
            }
            else
            {
                <div class="loginLoader"></div>
            }
        </button>
        <div class="loginError">
            @foreach (string error in errorMesages)
            {
                <p>@error</p>
            }
        </div>
    </div>
</div>

@code
{
    private ClientWebSocket? _webSocket;
    public LoginInfo userInfo { get; set; } = new LoginInfo();
    List<string> errorMesages = new List<string>();
    bool isLoading = false;

    public async Task HandleLogin()
    {
        errorMesages.Clear();

        if (userInfo.username.Length < 1)
        {
            errorMesages.Add("Error: User is invalid");
        }

        if (userInfo.ip != "localhost" && !IPAddress.TryParse(userInfo.ip, out _))
        {
            errorMesages.Add("Error: IP is invalid");
        }

        if (!userInfo.port.HasValue && !(userInfo.port >= 0 && userInfo.port <= 65535))
        {
            errorMesages.Add("Error: Port is invalid");
        }

        if (errorMesages.Count > 0)
        {
            return;
        }

        try
        {
            isLoading = true;
            if (userInfo.username.Length > 0)
            {
                await ServerComms.ConnectWebSocket("ws://" + userInfo.ip + ":" + userInfo.port,userInfo.username);
                await ServerComms.ReceiveMessage();
                isLoading = false;
                NavigationManager.NavigateTo("main-page");
            }
            else
            {
                throw new Exception("User name is empty");
            }
        }
        catch (Exception ex)
        {
            isLoading = false;
            errorMesages.Add("Failed to Connect to Server, please check the server info!");
            Console.WriteLine("WebSocket connection error: " + ex.Message);
        }
    }

}